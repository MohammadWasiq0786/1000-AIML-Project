"""
Project 729: Rule Extraction from Neural Networks
Description:
Rule extraction from neural networks refers to the process of extracting human-readable decision rules from a trained neural network model. This is useful in cases where we want to interpret a modelâ€™s decision-making process in terms of simple, understandable rules. Rule extraction methods aim to make black-box models like neural networks more transparent by mapping the learned weights and activations to understandable logical rules. In this project, we will explore techniques for rule extraction from a neural network using a simple feedforward neural network.

Explanation:
Data Preprocessing: We load and preprocess the Iris dataset, which consists of 4 features (sepal length, sepal width, petal length, petal width) and 3 classes (flower species).

Neural Network Training: We train a simple feedforward neural network using Keras. The network has one hidden layer with 10 neurons and an output layer for 3 classes.

Rule Extraction: The extract_rules() function extracts decision rules from the first layer of the neural network. It examines the weights of the input-to-hidden layer connections and generates a simple rule based on the sign of the weights for each input feature. The rules are in the form of "IF feature > 0 THEN Neuron activates."

Visualization: The visualize_rules() function prints the extracted rules, showing the logical relationships learned by the neural network.

This method provides a high-level approximation of how the neural network is making its decisions. The extracted rules might not capture all the nuances of the model's decision-making, but they provide a simplified, interpretable version of the model's behavior.
"""
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras import backend as K
 
# 1. Load and preprocess the dataset (Iris dataset for simplicity)
def load_dataset():
    data = load_iris()
    X = data.data
    y = data.target
    feature_names = data.feature_names
    return X, y, feature_names
 
# 2. Train a simple neural network
def train_model(X_train, y_train):
    model = Sequential([
        Dense(10, input_dim=X_train.shape[1], activation='relu'),
        Dense(3, activation='softmax')  # Output layer for 3 classes
    ])
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    model.fit(X_train, y_train, epochs=50, batch_size=10, verbose=0)
    return model
 
# 3. Extract decision rules based on the weights
def extract_rules(model, X_train, feature_names):
    """
    Extract decision rules based on the trained neural network's weights.
    The rules will be a simple interpretation of how the network's neurons interact.
    """
    # Extract the weights from the first layer (input to hidden layer)
    weights, biases = model.layers[0].get_weights()
    rules = []
    
    # Iterate through each neuron in the hidden layer
    for i in range(weights.shape[1]):
        rule = "IF "
        for j in range(weights.shape[0]):
            if weights[j, i] > 0:
                rule += f"{feature_names[j]} > 0 "
            else:
                rule += f"{feature_names[j]} <= 0 "
            if j < weights.shape[0] - 1:
                rule += "AND "
        rule += f"THEN Neuron {i} activates"
        rules.append(rule)
    
    return rules
 
# 4. Visualize the decision rules (optional)
def visualize_rules(rules):
    """
    Display the decision rules generated by the neural network.
    """
    for rule in rules:
        print(rule)
 
# 5. Example usage
X, y, feature_names = load_dataset()
 
# Split dataset into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
 
# Train the neural network
model = train_model(X_train, y_train)
 
# Extract decision rules from the trained neural network
rules = extract_rules(model, X_train, feature_names)
 
# Visualize the decision rules
visualize_rules(rules)

"""
Project 882. Malware Detection System

A malware detection system classifies files or programs as benign or malicious. In this project, we simulate feature data extracted from executable files (like file size, entropy, and API calls) and use a binary classification model to detect malware.

This model detects malware using static features. In real use, you'd extract these features via tools like PEfile, YARA, or dynamic analysis sandboxes (e.g., Cuckoo), and potentially apply neural networks for behavior-based detection.
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
 
# Simulated feature data from executable files
data = {
    'FileSizeKB': [300, 1200, 400, 800, 1500, 290, 350, 2000],
    'Entropy': [6.5, 3.2, 7.0, 4.5, 3.0, 6.8, 6.3, 2.5],  # randomness of file
    'NumAPIcalls': [120, 30, 140, 50, 20, 110, 115, 10],
    'UsesNetwork': [1, 0, 1, 0, 0, 1, 1, 0],
    'IsMalware': [1, 0, 1, 0, 0, 1, 1, 0]  # 1 = malware, 0 = benign
}
 
df = pd.DataFrame(data)
 
# Features and target
X = df.drop('IsMalware', axis=1)
y = df['IsMalware']
 
# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
 
# Train the malware classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
 
# Evaluate on test data
y_pred = model.predict(X_test)
print("Malware Detection Performance:")
print(classification_report(y_test, y_pred))
 
# Predict on new executable features
new_file = pd.DataFrame([{
    'FileSizeKB': 325,
    'Entropy': 6.7,
    'NumAPIcalls': 130,
    'UsesNetwork': 1
}])
 
malware_prob = model.predict_proba(new_file)[0][1]
print(f"\nPredicted Malware Probability: {malware_prob:.2%}")
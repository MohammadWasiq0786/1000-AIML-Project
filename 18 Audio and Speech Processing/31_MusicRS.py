"""
Project 710: Music Recommendation System
Description:
A music recommendation system suggests music tracks to users based on their preferences, listening history, or other factors. These systems are widely used by music streaming platforms like Spotify, Apple Music, and YouTube. In this project, we will implement a music recommendation system using collaborative filtering, which recommends music based on user interactions (e.g., listening history, ratings). We will use matrix factorization techniques such as SVD (Singular Value Decomposition) to generate recommendations.

We will use a simple collaborative filtering approach to recommend songs. We will create a user-item interaction matrix, where rows represent users, columns represent songs, and the values represent user ratings or interactions. We will then apply SVD to factorize the matrix and predict missing values, which are used to generate recommendations.

Required Libraries:
pip install numpy pandas scikit-learn

Explanation:
User-Item Matrix: We create a user-item interaction matrix where users' interactions with songs (like ratings) are represented in a matrix format.

SVD (Singular Value Decomposition): We use SVD for matrix factorization, which decomposes the user-item matrix into latent factors (representing users and songs). This allows us to predict missing values (unrated songs) and recommend songs to users based on their interaction history.

Song Recommendation: The system recommends songs to users based on their predicted scores for each song, which are generated by the SVD model.

This is a basic collaborative filtering implementation. You can extend this project by incorporating content-based filtering, hybrid approaches, and deep learning models for better accuracy in recommending music.
"""

import numpy as np
import pandas as pd
from sklearn.decomposition import TruncatedSVD
from sklearn.metrics import mean_squared_error
 
# 1. Create a sample user-item interaction matrix (user-song ratings)
def create_user_item_matrix(data):
    # Convert the data into a pandas DataFrame for better handling
    df = pd.DataFrame(data)
    return df.pivot(index='user_id', columns='song_id', values='rating')
 
# 2. Apply Singular Value Decomposition (SVD) for collaborative filtering
def apply_svd(user_item_matrix, n_components=5):
    # Perform matrix factorization using SVD
    svd = TruncatedSVD(n_components=n_components)
    matrix_reduced = svd.fit_transform(user_item_matrix.fillna(0))  # Fill NaN with 0 (missing values)
    return svd, matrix_reduced
 
# 3. Make song recommendations for a specific user
def recommend_songs(user_id, user_item_matrix, svd, matrix_reduced, n_recommendations=5):
    user_index = user_id - 1  # User ID starts from 1, so subtract 1 for index
    user_scores = np.dot(matrix_reduced[user_index, :], svd.components_)
    recommended_song_indices = np.argsort(user_scores)[::-1][:n_recommendations]
    
    # Retrieve song IDs and their predicted scores
    recommended_songs = [(user_item_matrix.columns[i], user_scores[i]) for i in recommended_song_indices]
    return recommended_songs
 
# 4. Example usage
data = {
    'user_id': [1, 1, 1, 2, 2, 3, 3, 3],
    'song_id': [1, 2, 3, 1, 3, 2, 4, 5],
    'rating': [5, 3, 4, 4, 5, 2, 4, 5]
}
 
# Create user-item interaction matrix
user_item_matrix = create_user_item_matrix(data)
 
# Apply SVD for matrix factorization
svd, matrix_reduced = apply_svd(user_item_matrix, n_components=3)
 
# Make recommendations for user 1
user_id = 1
recommended_songs = recommend_songs(user_id, user_item_matrix, svd, matrix_reduced)
print(f"Recommended songs for User {user_id}:")
for song, score in recommended_songs:
    print(f"Song ID: {song}, Predicted Score: {score}")